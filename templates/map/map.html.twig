{% extends 'base.html.twig' %}

{% block title %}Hello HomeController!{% endblock %}
{% block stylesheets %}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
          crossorigin="" />
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.css" />
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/leaflet.markercluster@1.3.0/dist/MarkerCluster.Default.css" />
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.css"
{% endblock %}

{% block body %}
    <style type="text/css">
        #map{
            height: 100vh;
            z-index: 0;
        }

        .addEventButt {
            position: fixed;
            /* Fixed/sticky position */
            bottom: 50px;
            /* Place the button at the bottom of the page */
            right: 50px;
            /* Place the button 30px from the right */
            z-index: 99;
            /* Make sure it does not overlap */
            border: none;
            /* Remove borders */
            outline: none;
            /* Remove outline */
            cursor: pointer;
            /* Add a mouse pointer on hover */
            padding: 20px;
            /* Some padding */
            border-radius: 35px;
            /* Rounded corners */
            background-color: #fb3;
        }

        .addEventButt:hover {
            background-color: #b20000;
            /* Add a dark-grey background on hover */
            transition-duration: 0.5s;
        }
    </style>

    <div id="map">
    </div>

    <button type="button" class="btn addEventButt text-white" data-toggle="modal" data-target="#modalEvent">
        <i class="fas fa-plus"></i>
    </button>




{% endblock %}
{% block javascripts %}
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
            crossorigin=""></script>
    <script type="text/javascript">
        // On initialise la latitude et la longitude de Lyon (centre de la carte)
        let lat = 45.75;
        let lon = 4.85;
        let macarte = null;
        let zoom = 14; // Zoom de la carte par défaut
        // Fonction d'initialisation de la carte
        function initMap() {
            // Créer l'objet "macarte" et l'insèrer dans l'élément HTML qui a l'ID "map"
            macarte = L.map('map').setView([lat, lon], zoom);
            // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
            L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', {
                // Il est toujours bien de laisser le lien vers la source des données
                attribution: 'données © <a href="//osm.org/copyright">OpenStreetMap</a>/ODbL - rendu <a href="//openstreetmap.fr">OSM France</a>',
                minZoom: 1,
                maxZoom: 20
            }).addTo(macarte);
        }
        window.onload = function(){
            // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
            initMap();

            let adresses =
                [
                    {% for problem in problems %}
                    {
                        lat : '{{ problem.lat }}',
                        long : '{{ problem.lon }}',
                        id : '{{ problem.id }}',
                        type: '{{ problem.type }}',
                        address: '{{ problem.address }}',
                        city: '{{ problem.city }}',
                        ZC: '{{ problem.zipcode }}'
                    },
                    {% endfor %}
                ];
            // Nous parcourons la liste des adresses
            for (adresse in adresses) {
                let marker = L.marker([adresses[adresse].lat, adresses[adresse].long]).bindPopup(
                    "<h5>"+adresses[adresse].type+"</h5> <p>"
                    + adresses[adresse].address + "</p>"+
                    "<p>"
                    + adresses[adresse].ZC + " " + adresses[adresse].city +
                    "</p>"
                )
                    .addTo(macarte);
                // Nous ajoutons la popup. A noter que son contenu (ici la variable ville) peut être du HTML
                //marker.bindPopup(adresses[adresse].place).openPopup();
            }
        };
    </script>

{% endblock%}
